name: Fetch DRA Issues and PRs & Add to Project

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch: # Allows manual execution

jobs:
  fetch-and-add-to-project:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch DRA Issues and PRs and Add to Project
        id: fetch-dra-items
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const projectId = "PVT_kwHOCAOYJ84AxfwF"; // Project Board ID
            const keywordRegex = /\bDRA\b|\bDynamic Resource Allocation\b/i;

            async function fetchDRAItems(github) {
              const queries = [
                'repo:kubernetes/autoscaler (DRA OR "Dynamic Resource Allocation")',
                'repo:kubernetes/enhancements (DRA OR "Dynamic Resource Allocation")',
              ];

              const items = [];

              for (const query of queries) {
                let page = 1;
                let hasMore = true;

                while (hasMore) {
                  const results = await github.rest.search.issuesAndPullRequests({
                    q: query,
                    per_page: 100,
                    page,
                  });

                  const filteredResults = results.data.items.filter(item =>
                    keywordRegex.test(item.title || '') || keywordRegex.test(item.body || '')
                  );

                  items.push(...filteredResults);
                  hasMore = results.data.items.length === 100;
                  page += 1;
                }
              }

              return items;
            }

            async function addToProject(github, contentId) {
              try {
                await github.graphql(`
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                      item {
                        id
                      }
                    }
                  }
                `, {
                  projectId: projectId,
                  contentId: contentId
                });
                console.log(`‚úÖ Added item ${contentId} to project.`);
              } catch (error) {
                console.error(`‚ùå Failed to add item ${contentId}: ${error.message}`);
              }
            }

            console.log("üîç Fetching DRA-related issues and PRs...");
            const draItems = await fetchDRAItems(github);

            if (draItems.length === 0) {
              console.log("‚ÑπÔ∏è No valid DRA-related items found.");
              return;
            }

            console.log(`üìå Found ${draItems.length} valid DRA items. Adding to project...`);
            for (const item of draItems) {
              await addToProject(github, item.node_id);
            }
